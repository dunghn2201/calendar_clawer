"""
Demo crawler ƒë·ªÉ test ho·∫°t ƒë·ªông
Crawl t·ª´ API ho·∫∑c trang web ƒë∆°n gi·∫£n
"""

from datetime import datetime, timedelta
from typing import List, Optional
import requests
import json
import re

from .base_crawler import BaseCrawler, LichData

class DemoCrawler(BaseCrawler):
    """Demo crawler ƒë·ªÉ test c√°c ch·ª©c nƒÉng"""
    
    def __init__(self, delay: float = 0.5, max_retries: int = 3):
        super().__init__(delay, max_retries)
        self.source_name = "demo_data"
    
    def generate_demo_data(self, year: int, month: int) -> List[LichData]:
        """T·∫°o d·ªØ li·ªáu demo ƒë·ªÉ test"""
        data = []
        
        # Danh s√°ch can chi ƒë∆°n gi·∫£n
        can = ['Gi√°p', '·∫§t', 'B√≠nh', 'ƒêinh', 'M·∫≠u', 'K·ª∑', 'Canh', 'T√¢n', 'Nh√¢m', 'Qu√Ω']
        chi = ['T√Ω', 'S·ª≠u', 'D·∫ßn', 'M√£o', 'Th√¨n', 'T·ªµ', 'Ng·ªç', 'M√πi', 'Th√¢n', 'D·∫≠u', 'Tu·∫•t', 'H·ª£i']
        
        # S·ªë ng√†y trong th√°ng
        if month in [4, 6, 9, 11]:
            days_in_month = 30
        elif month == 2:
            days_in_month = 29 if year % 4 == 0 else 28
        else:
            days_in_month = 31
        
        for day in range(1, days_in_month + 1):
            try:
                # T·∫°o ng√†y d∆∞∆°ng l·ªãch
                solar_date = f"{year}-{month:02d}-{day:02d}"
                
                # T·∫°o ng√†y √¢m l·ªãch gi·∫£ (ch·ªâ ƒë·ªÉ demo)
                lunar_day = (day + 10) % 30 + 1
                lunar_month = month if lunar_day <= 15 else (month % 12) + 1
                lunar_date = f"{lunar_day:02d}/{lunar_month:02d}"
                
                # T·∫°o can chi
                can_index = (day - 1) % 10
                chi_index = (day - 1) % 12
                can_chi = f"{can[can_index]} {chi[chi_index]}"
                
                # Th√™m ng√†y l·ªÖ cho m·ªôt s·ªë ng√†y
                holiday = None
                if month == 1 and day == 1:
                    holiday = "T·∫øt D∆∞∆°ng l·ªãch"
                elif month == 2 and day == 14:
                    holiday = "Valentine"
                elif month == 4 and day == 30:
                    holiday = "Gi·∫£i ph√≥ng mi·ªÅn Nam"
                elif month == 9 and day == 2:
                    holiday = "Qu·ªëc kh√°nh"
                
                lich_data = LichData(
                    solar_date=solar_date,
                    lunar_date=lunar_date,
                    can_chi_day=can_chi,
                    holiday=holiday,
                    notes=f"Demo data cho ng√†y {day}/{month}/{year}",
                    source=self.source_name
                )
                
                data.append(lich_data)
                
            except Exception as e:
                self.logger.warning(f"L·ªói t·∫°o demo data cho ng√†y {day}: {e}")
                continue
        
        return data
    
    def crawl_month(self, year: int, month: int) -> List[LichData]:
        """Crawl d·ªØ li·ªáu m·ªôt th√°ng (demo)"""
        self.logger.info(f"T·∫°o demo data cho th√°ng {month}/{year}")
        
        # Gi·∫£ l·∫≠p delay nh∆∞ crawl th·∫≠t
        self.rate_limit()
        
        data = self.generate_demo_data(year, month)
        self.logger.info(f"ƒê√£ t·∫°o {len(data)} ng√†y demo data")
        
        return data
    
    def crawl_date(self, date: datetime) -> Optional[LichData]:
        """Crawl d·ªØ li·ªáu cho m·ªôt ng√†y c·ª• th·ªÉ"""
        month_data = self.crawl_month(date.year, date.month)
        date_str = date.strftime("%Y-%m-%d")
        
        for item in month_data:
            if item.solar_date == date_str:
                return item
        
        return None

# Crawler th·ª±c t·∫ø cho m·ªôt API l·ªãch √¢m
class VietnameseCalendarAPI(BaseCrawler):
    """Crawler s·ª≠ d·ª•ng API th·ª±c t·∫ø"""
    
    def __init__(self, delay: float = 1.0, max_retries: int = 3):
        super().__init__(delay, max_retries)
        self.source_name = "api_calendar"
        # API n√†y c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i, ch·ªâ l√† v√≠ d·ª•
        self.api_base = "https://api.calendar-vietnam.com"
    
    def crawl_month(self, year: int, month: int) -> List[LichData]:
        """Crawl t·ª´ API"""
        data = []
        
        try:
            # Th·ª≠ g·ªçi API (c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông)
            url = f"{self.api_base}/lunar-calendar/{year}/{month}"
            response = self.retry_request(url)
            
            if response and response.status_code == 200:
                api_data = response.json()
                
                for day_info in api_data.get('days', []):
                    lich_data = LichData(
                        solar_date=day_info.get('solar_date'),
                        lunar_date=day_info.get('lunar_date'),
                        can_chi_day=day_info.get('can_chi'),
                        holiday=day_info.get('holiday'),
                        source=self.source_name
                    )
                    data.append(lich_data)
            
            else:
                # Fallback to demo data
                self.logger.info("API kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng demo data")
                demo_crawler = DemoCrawler()
                data = demo_crawler.crawl_month(year, month)
                # ƒê·ªïi source
                for item in data:
                    item.source = self.source_name + "_demo"
        
        except Exception as e:
            self.logger.error(f"L·ªói API crawl: {e}")
            # Fallback to demo data
            demo_crawler = DemoCrawler()
            data = demo_crawler.crawl_month(year, month)
        
        return data
    
    def crawl_date(self, date: datetime) -> Optional[LichData]:
        """Crawl d·ªØ li·ªáu cho m·ªôt ng√†y c·ª• th·ªÉ"""
        month_data = self.crawl_month(date.year, date.month)
        date_str = date.strftime("%Y-%m-%d")
        
        for item in month_data:
            if item.solar_date == date_str:
                return item
        
        return None

# Ch·∫°y th·ª≠ nghi·ªám
if __name__ == "__main__":
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    
    print("üß™ Testing Demo Crawler...")
    
    # Test demo crawler
    demo_crawler = DemoCrawler()
    data = demo_crawler.crawl_month(2024, 7)
    print(f"‚úÖ Demo crawler: {len(data)} ng√†y")
    
    if data:
        print("\nüìã Demo data sample:")
        for i, item in enumerate(data[:5]):
            print(f"  {i+1}. {item.solar_date} - {item.lunar_date} - {item.can_chi_day}")
    
    # Test API crawler
    print("\nüåê Testing API Crawler...")
    api_crawler = VietnameseCalendarAPI()
    api_data = api_crawler.crawl_month(2024, 7)
    print(f"‚úÖ API crawler: {len(api_data)} ng√†y")
    
    # L∆∞u demo data
    if data:
        demo_crawler.data = data
        demo_crawler.save_to_json("demo_data.json")
        demo_crawler.save_to_sqlite("demo_data.db")
        print("üíæ ƒê√£ l∆∞u demo data")
