"""
Vietnamese Lunar Calendar Generator
T·∫°o d·ªØ li·ªáu l·ªãch √¢m Vi·ªát Nam d·ª±a tr√™n thu·∫≠t to√°n
"""

import json
from datetime import datetime, timedelta
from pathlib import Path
import calendar

class VietnameseLunarCalendar:
    """Generator cho l·ªãch √¢m Vi·ªát Nam"""
    
    def __init__(self):
        # D·ªØ li·ªáu can chi
        self.can = ["Gi√°p", "·∫§t", "B√≠nh", "ƒêinh", "M·∫≠u", "K·ª∑", "Canh", "T√¢n", "Nh√¢m", "Qu√Ω"]
        self.chi = ["T√≠", "S·ª≠u", "D·∫ßn", "M√£o", "Th√¨n", "T·ªµ", "Ng·ªç", "M√πi", "Th√¢n", "D·∫≠u", "Tu·∫•t", "H·ª£i"]
        
        # Ng√†y l·ªÖ c·ªë ƒë·ªãnh d∆∞∆°ng l·ªãch
        self.solar_holidays = {
            "01-01": "T·∫øt D∆∞∆°ng l·ªãch",
            "02-14": "L·ªÖ t√¨nh nh√¢n",
            "03-08": "Ng√†y Qu·ªëc t·∫ø Ph·ª• n·ªØ",
            "04-30": "Ng√†y Gi·∫£i ph√≥ng mi·ªÅn Nam",
            "05-01": "Ng√†y Qu·ªëc t·∫ø Lao ƒë·ªông", 
            "06-01": "Ng√†y Qu·ªëc t·∫ø Thi·∫øu nhi",
            "09-02": "Ng√†y Qu·ªëc kh√°nh",
            "10-20": "Ng√†y Ph·ª• n·ªØ Vi·ªát Nam",
            "11-20": "Ng√†y Nh√† gi√°o Vi·ªát Nam",
            "12-25": "L·ªÖ Gi√°ng sinh"
        }
        
        # Ng√†y l·ªÖ √¢m l·ªãch (t√≠nh g·∫ßn ƒë√∫ng)
        self.lunar_holidays = {
            "01-01": "T·∫øt Nguy√™n ƒë√°n",
            "01-15": "T·∫øt Nguy√™n ti√™u",
            "03-03": "T·∫øt H√†n th·ª±c",
            "04-15": "Ph·∫≠t ƒë·∫£n",
            "05-05": "T·∫øt ƒêoan ng·ªç",
            "07-15": "Vu lan",
            "08-15": "T·∫øt Trung thu",
            "10-10": "T·∫øt Th∆∞·ªùng t√¢n",
            "12-23": "√îng T√°o v·ªÅ tr·ªùi"
        }
        
        # Gi·ªù ho√†ng ƒë·∫°o c∆° b·∫£n
        self.good_hours_by_day = {
            0: ["T√Ω (23h-1h)", "D·∫ßn (3h-5h)", "Th√¨n (7h-9h)", "Ng·ªç (11h-13h)"],  # Ch·ªß nh·∫≠t
            1: ["S·ª≠u (1h-3h)", "M√£o (5h-7h)", "T·ªµ (9h-11h)", "M√πi (13h-15h)"],  # Th·ª© 2
            2: ["T√Ω (23h-1h)", "D·∫ßn (3h-5h)", "Th√¨n (7h-9h)", "Th√¢n (15h-17h)"],  # Th·ª© 3  
            3: ["S·ª≠u (1h-3h)", "M√£o (5h-7h)", "T·ªµ (9h-11h)", "D·∫≠u (17h-19h)"],  # Th·ª© 4
            4: ["T√Ω (23h-1h)", "D·∫ßn (3h-5h)", "Th√¨n (7h-9h)", "Tu·∫•t (19h-21h)"], # Th·ª© 5
            5: ["S·ª≠u (1h-3h)", "M√£o (5h-7h)", "T·ªµ (9h-11h)", "H·ª£i (21h-23h)"],  # Th·ª© 6
            6: ["T√Ω (23h-1h)", "D·∫ßn (3h-5h)", "Th√¨n (7h-9h)", "Ng·ªç (11h-13h)"]   # Th·ª© 7
        }
        
        # Ho·∫°t ƒë·ªông t·ªët/x·∫•u theo ng√†y
        self.good_activities = [
            "C∆∞·ªõi h·ªèi", "Khai tr∆∞∆°ng", "Kh·ªüi c√¥ng", "Du l·ªãch", "K√Ω h·ª£p ƒë·ªìng",
            "G·∫∑p g·ª° ƒë·ªëi t√°c", "H·ªçp h√†nh", "H·ªçc h√†nh", "C·∫ßu an", "C√∫ng t·∫ø",
            "Chuy·ªÉn nh√†", "Mua s·∫Øm", "ƒê·∫ßu t∆∞", "Kinh doanh", "Xu·∫•t h√†nh"
        ]
        
        self.bad_activities = [
            "ƒê·ªông th·ªï x·∫•u", "Khai tr∆∞∆°ng x·∫•u", "C∆∞·ªõi h·ªèi x·∫•u", "Du l·ªãch xa",
            "K√Ω h·ª£p ƒë·ªìng quan tr·ªçng", "Ph·∫´u thu·∫≠t", "Tranh t·ª•ng", "Ki·ªán c√°o"
        ]
    
    def get_can_chi_day(self, date):
        """T√≠nh can chi c·ªßa ng√†y (t√≠nh g·∫ßn ƒë√∫ng)"""
        # C√¥ng th·ª©c ƒë∆°n gi·∫£n ƒë·ªÉ t√≠nh can chi
        days_from_epoch = (date - datetime(1900, 1, 1)).days
        can_index = (days_from_epoch + 6) % 10  # Offset ƒë·ªÉ align v·ªõi l·ªãch th·ª±c
        chi_index = (days_from_epoch + 8) % 12  # Offset ƒë·ªÉ align v·ªõi l·ªãch th·ª±c
        return f"{self.can[can_index]} {self.chi[chi_index]}"
    
    def get_lunar_date(self, solar_date):
        """T√≠nh ng√†y √¢m l·ªãch (g·∫ßn ƒë√∫ng)"""
        # ƒê√¢y l√† thu·∫≠t to√°n ƒë∆°n gi·∫£n, kh√¥ng ch√≠nh x√°c 100%
        # Trong th·ª±c t·∫ø c·∫ßn thu·∫≠t to√°n ph·ª©c t·∫°p h∆°n
        year = solar_date.year
        month = solar_date.month
        day = solar_date.day
        
        # Offset g·∫ßn ƒë√∫ng gi·ªØa √¢m v√† d∆∞∆°ng l·ªãch
        lunar_offset = -30 if month <= 6 else -35
        
        # T√≠nh ng√†y √¢m g·∫ßn ƒë√∫ng
        total_days = day + lunar_offset
        if total_days <= 0:
            lunar_month = month - 1 if month > 1 else 12
            lunar_year = year if month > 1 else year - 1
            lunar_day = 30 + total_days
        else:
            lunar_month = month
            lunar_year = year
            lunar_day = total_days
        
        # ƒê·∫£m b·∫£o lunar_day trong kho·∫£ng h·ª£p l·ªá
        lunar_day = max(1, min(30, lunar_day))
        
        return f"{lunar_day:02d}/{lunar_month:02d}/{lunar_year}"
    
    def get_feng_shui_info(self, date):
        """L·∫•y th√¥ng tin phong th·ªßy cho ng√†y"""
        weekday = date.weekday()
        good_hours = self.good_hours_by_day[weekday]
        
        # ƒê√°nh gi√° ng√†y t·ªët/x·∫•u d·ª±a tr√™n m·ªôt s·ªë y·∫øu t·ªë
        day_score = (date.day + date.month + weekday) % 10
        is_good_day = day_score >= 5
        
        return {
            "good_hours": good_hours,
            "bad_hours": [],
            "is_good_day": is_good_day,
            "score": day_score * 10,
            "lucky_direction": "ƒê√¥ng Nam" if day_score >= 7 else "T√¢y Nam",
            "unlucky_direction": "T√¢y B·∫Øc" if day_score < 5 else "ƒê√¥ng B·∫Øc"
        }
    
    def get_activities(self, date, feng_shui_info):
        """L·∫•y ho·∫°t ƒë·ªông n√™n/kh√¥ng n√™n l√†m"""
        day_value = (date.day + date.month) % len(self.good_activities)
        
        if feng_shui_info["is_good_day"]:
            good_count = 3 + (day_value % 3)
            selected_good = [self.good_activities[(day_value + i) % len(self.good_activities)] 
                           for i in range(good_count)]
            selected_bad = [self.bad_activities[day_value % len(self.bad_activities)]]
        else:
            good_count = 1 + (day_value % 2)
            selected_good = [self.good_activities[(day_value + i) % len(self.good_activities)] 
                           for i in range(good_count)]
            bad_count = 2 + (day_value % 2)
            selected_bad = [self.bad_activities[(day_value + i) % len(self.bad_activities)] 
                          for i in range(bad_count)]
        
        return {
            "good_activities": selected_good,
            "bad_activities": selected_bad
        }
    
    def check_holiday(self, date):
        """Ki·ªÉm tra ng√†y l·ªÖ"""
        date_str = date.strftime("%m-%d")
        
        solar_holiday = self.solar_holidays.get(date_str)
        
        # T√≠nh lunar holiday g·∫ßn ƒë√∫ng (c·∫ßn thu·∫≠t to√°n ch√≠nh x√°c h∆°n)
        lunar_date_str = self.get_lunar_date(date)
        lunar_md = lunar_date_str.split('/')[0] + "-" + lunar_date_str.split('/')[1]
        lunar_holiday = self.lunar_holidays.get(lunar_md)
        
        return {
            "solar": solar_holiday,
            "lunar": lunar_holiday
        }
    
    def generate_month_data(self, year, month):
        """T·∫°o d·ªØ li·ªáu cho m·ªôt th√°ng"""
        days_in_month = calendar.monthrange(year, month)[1]
        month_data = {
            "year": year,
            "month": month,
            "total_days": days_in_month,
            "days": []
        }
        
        for day in range(1, days_in_month + 1):
            date = datetime(year, month, day)
            lunar_date = self.get_lunar_date(date)
            can_chi = self.get_can_chi_day(date)
            feng_shui = self.get_feng_shui_info(date)
            activities = self.get_activities(date, feng_shui)
            holidays = self.check_holiday(date)
            
            day_data = {
                "solar_date": date.strftime("%Y-%m-%d"),
                "lunar_date": lunar_date,
                "day_of_week": date.weekday() + 1,  # 1=Monday, 7=Sunday
                "can_chi": {
                    "day": can_chi,
                    "month": None,  # C·∫ßn thu·∫≠t to√°n ph·ª©c t·∫°p h∆°n
                    "year": None
                },
                "feng_shui": {
                    "good_hours": feng_shui["good_hours"],
                    "bad_hours": feng_shui["bad_hours"],
                    "lucky_direction": feng_shui["lucky_direction"],
                    "unlucky_direction": feng_shui["unlucky_direction"]
                },
                "activities": {
                    "is_good_day": feng_shui["is_good_day"],
                    "good_activities": activities["good_activities"],
                    "bad_activities": activities["bad_activities"]
                },
                "holidays": holidays,
                "solar_term": None,  # C·∫ßn data 24 ti·∫øt kh√≠
                "notes": f"Ng√†y {'t·ªët' if feng_shui['is_good_day'] else 'b√¨nh th∆∞·ªùng'}. Can chi: {can_chi}. Gi·ªù ho√†ng ƒë·∫°o: {', '.join(feng_shui['good_hours'])}.",
                "metadata": {
                    "source": "vietnamese_lunar_generator",
                    "generated_at": datetime.now().isoformat()
                }
            }
            
            month_data["days"].append(day_data)
        
        return month_data

def generate_calendar_data():
    """T·∫°o d·ªØ li·ªáu l·ªãch cho nhi·ªÅu th√°ng"""
    generator = VietnameseLunarCalendar()
    
    # T·∫°o data cho 2024 (c√≥ nhi·ªÅu th√°ng)
    months_to_generate = [
        (2024, 7), (2024, 8), (2024, 9), (2024, 10),
        (2024, 11), (2024, 12), (2025, 1), (2025, 2)
    ]
    
    for year, month in months_to_generate:
        print(f"üóìÔ∏è Generating calendar data for {year}-{month:02d}...")
        
        month_data = generator.generate_month_data(year, month)
        
        # L∆∞u file calendar
        calendar_file = f"data/api/calendar_{year}_{month:02d}.json"
        Path(calendar_file).parent.mkdir(parents=True, exist_ok=True)
        
        with open(calendar_file, 'w', encoding='utf-8') as f:
            json.dump(month_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ Saved {calendar_file}")
        
        # T·∫°o good days data
        good_days = [day for day in month_data["days"] if day["activities"]["is_good_day"]]
        good_days_file = f"data/api/good_days/{year}_{month:02d}.json"
        Path(good_days_file).parent.mkdir(parents=True, exist_ok=True)
        
        with open(good_days_file, 'w', encoding='utf-8') as f:
            json.dump(good_days, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ Saved {good_days_file} with {len(good_days)} good days")
    
    # T·∫°o holidays data
    holidays_2024 = [
        {"name": "T·∫øt D∆∞∆°ng l·ªãch", "date": "2024-01-01", "description": "NƒÉm m·ªõi D∆∞∆°ng l·ªãch", "type": "national"},
        {"name": "T·∫øt Nguy√™n ƒë√°n", "date": "2024-02-10", "description": "T·∫øt c·ªï truy·ªÅn Vi·ªát Nam", "type": "traditional"},
        {"name": "Gi·ªó t·ªï H√πng V∆∞∆°ng", "date": "2024-04-18", "description": "Ng√†y Gi·ªó t·ªï H√πng V∆∞∆°ng", "type": "traditional"},
        {"name": "Ng√†y Gi·∫£i ph√≥ng mi·ªÅn Nam", "date": "2024-04-30", "description": "Ng√†y th·ªëng nh·∫•t ƒë·∫•t n∆∞·ªõc", "type": "national"},
        {"name": "Ng√†y Qu·ªëc t·∫ø Lao ƒë·ªông", "date": "2024-05-01", "description": "Ng√†y Qu·ªëc t·∫ø Lao ƒë·ªông", "type": "international"},
        {"name": "Ng√†y Qu·ªëc kh√°nh", "date": "2024-09-02", "description": "Ng√†y Qu·ªëc kh√°nh Vi·ªát Nam", "type": "national"},
        {"name": "Ng√†y Nh√† gi√°o Vi·ªát Nam", "date": "2024-11-20", "description": "Ng√†y t√¥n vinh c√°c nh√† gi√°o", "type": "national"}
    ]
    
    holidays_file = "data/api/holidays/2024.json"
    Path(holidays_file).parent.mkdir(parents=True, exist_ok=True)
    
    with open(holidays_file, 'w', encoding='utf-8') as f:
        json.dump(holidays_2024, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ Saved {holidays_file} with {len(holidays_2024)} holidays")
    
    print("\nüéâ Calendar data generation completed!")
    print("üìÅ Generated files:")
    print(f"  ‚Ä¢ Calendar data: {len(months_to_generate)} months")
    print(f"  ‚Ä¢ Good days data: {len(months_to_generate)} months") 
    print(f"  ‚Ä¢ Holidays data: 1 year")

if __name__ == "__main__":
    generate_calendar_data()
