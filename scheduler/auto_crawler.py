"""
Auto scheduler ƒë·ªÉ t·ª± ƒë·ªông crawl d·ªØ li·ªáu l·ªãch √¢m
Ch·∫°y theo l·ªãch tr√¨nh ƒë√£ ƒë·ªãnh
"""

import schedule
import time
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any
import threading
import json
from pathlib import Path

# Import crawlers (s·∫Ω work sau khi c√†i ƒë·∫∑t dependencies)
try:
    from crawlers.improved_crawler import ImprovedCalendarCrawler
    CRAWLERS_AVAILABLE = True
except ImportError as e:
    logging.error(f"Cannot import crawlers: {e}")
    CRAWLERS_AVAILABLE = False
    from processors.data_processor import LichDataProcessor
except ImportError as e:
    print(f"Import warning: {e}")
    print("C·∫ßn c√†i ƒë·∫∑t dependencies tr∆∞·ªõc khi ch·∫°y")

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/scheduler.log'),
        logging.StreamHandler()
    ]
)

class AutoCrawler:
    """T·ª± ƒë·ªông crawl d·ªØ li·ªáu theo l·ªãch tr√¨nh"""
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.crawlers = {}
        self.is_running = False
        
        # T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
        Path('logs').mkdir(exist_ok=True)
        Path('data').mkdir(exist_ok=True)
        Path('data/daily').mkdir(exist_ok=True)
        Path('data/monthly').mkdir(exist_ok=True)
        
        # Kh·ªüi t·∫°o crawlers
        self.init_crawlers()
    
    def init_crawlers(self):
        """Kh·ªüi t·∫°o c√°c crawler"""
        if not CRAWLERS_AVAILABLE:
            self.logger.error("‚ùå Kh√¥ng th·ªÉ import crawlers")
            self.crawlers = {}
            return
            
        try:
            self.crawlers = {
                'improved': ImprovedCalendarCrawler(delay=1.0),  # Crawler ch√≠nh
            }
            self.logger.info("‚úÖ ƒê√£ kh·ªüi t·∫°o improved crawler")
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o crawlers: {e}")
            self.crawlers = {}
    
    def crawl_today(self):
        """Crawl d·ªØ li·ªáu ng√†y h√¥m nay"""
        today = datetime.now()
        self.logger.info(f"üöÄ B·∫Øt ƒë·∫ßu crawl ng√†y {today.strftime('%Y-%m-%d')}")
        
        all_data = []
        results = {}
        
        for name, crawler in self.crawlers.items():
            try:
                self.logger.info(f"üì° Crawling {name}...")
                data = crawler.crawl_date(today)
                
                if data:
                    all_data.append(data)
                    results[name] = "‚úÖ Th√†nh c√¥ng"
                    self.logger.info(f"‚úÖ {name}: Crawl th√†nh c√¥ng")
                else:
                    results[name] = "‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu"
                    self.logger.warning(f"‚ö†Ô∏è {name}: Kh√¥ng c√≥ d·ªØ li·ªáu")
                
            except Exception as e:
                results[name] = f"‚ùå L·ªói: {str(e)}"
                self.logger.error(f"‚ùå {name}: {e}")
        
        # L∆∞u k·∫øt qu·∫£
        if all_data:
            filename = f"data/daily/lich_{today.strftime('%Y_%m_%d')}.json"
            self.save_daily_data(all_data, filename)
        
        # Log t·ªïng k·∫øt
        self.logger.info("üìã T·ªïng k·∫øt crawl h√¥m nay:")
        for name, result in results.items():
            self.logger.info(f"  {name}: {result}")
        
        return results
    
    def crawl_current_month(self):
        """Crawl d·ªØ li·ªáu th√°ng hi·ªán t·∫°i"""
        now = datetime.now()
        self.logger.info(f"üóìÔ∏è B·∫Øt ƒë·∫ßu crawl th√°ng {now.strftime('%m/%Y')}")
        
        all_data = []
        results = {}
        
        for name, crawler in self.crawlers.items():
            try:
                self.logger.info(f"üì° Crawling {name} for month {now.month}/{now.year}...")
                month_data = crawler.crawl_month(now.year, now.month)
                
                if month_data:
                    all_data.extend(month_data)
                    results[name] = f"‚úÖ {len(month_data)} ng√†y"
                    self.logger.info(f"‚úÖ {name}: {len(month_data)} ng√†y")
                else:
                    results[name] = "‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu"
                    self.logger.warning(f"‚ö†Ô∏è {name}: Kh√¥ng c√≥ d·ªØ li·ªáu")
                
            except Exception as e:
                results[name] = f"‚ùå L·ªói: {str(e)}"
                self.logger.error(f"‚ùå {name}: {e}")
        
        # X·ª≠ l√Ω v√† l∆∞u d·ªØ li·ªáu
        if all_data:
            filename = f"data/monthly/lich_{now.strftime('%Y_%m')}.json"
            self.save_monthly_data(all_data, filename)
            
            # X·ª≠ l√Ω d·ªØ li·ªáu
            self.process_monthly_data(filename)
        
        # Log t·ªïng k·∫øt
        self.logger.info("üìã T·ªïng k·∫øt crawl th√°ng:")
        for name, result in results.items():
            self.logger.info(f"  {name}: {result}")
        
        return results
    
    def save_daily_data(self, data, filename: str):
        """L∆∞u d·ªØ li·ªáu ng√†y"""
        try:
            data_dict = [item.to_dict() if hasattr(item, 'to_dict') else item for item in data]
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data_dict, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"üíæ ƒê√£ l∆∞u d·ªØ li·ªáu ng√†y: {filename}")
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói l∆∞u d·ªØ li·ªáu ng√†y: {e}")
    
    def save_monthly_data(self, data, filename: str):
        """L∆∞u d·ªØ li·ªáu th√°ng"""
        try:
            data_dict = [item.to_dict() if hasattr(item, 'to_dict') else item for item in data]
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data_dict, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"üíæ ƒê√£ l∆∞u d·ªØ li·ªáu th√°ng: {filename} ({len(data_dict)} records)")
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói l∆∞u d·ªØ li·ªáu th√°ng: {e}")
    
    def process_monthly_data(self, filename: str):
        """X·ª≠ l√Ω d·ªØ li·ªáu th√°ng"""
        try:
            processor = LichDataProcessor(filename)
            cleaned = processor.clean_and_process()
            
            if not cleaned.empty:
                # Export c√°c format
                base_name = filename.replace('.json', '')
                processor.export_to_sqlite(f"{base_name}.db")
                processor.export_to_csv(f"{base_name}.csv")
                
                # Th·ªëng k√™
                stats = processor.get_statistics()
                self.logger.info(f"üìä Th·ªëng k√™: {stats['total_records']} records h·ª£p l·ªá")
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
    
    def setup_schedule(self):
        """Thi·∫øt l·∫≠p l·ªãch tr√¨nh t·ª± ƒë·ªông"""
        # Crawl h√†ng ng√†y l√∫c 6:00 s√°ng
        schedule.every().day.at("06:00").do(self.crawl_today)
        
        # Crawl th√°ng hi·ªán t·∫°i v√†o ng√†y 1 h√†ng th√°ng l√∫c 7:00
        schedule.every().month.do(self.crawl_current_month)
        
        # Crawl h√†ng tu·∫ßn v√†o Ch·ªß nh·∫≠t l√∫c 8:00
        schedule.every().sunday.at("08:00").do(self.crawl_today)
        
        self.logger.info("‚è∞ ƒê√£ thi·∫øt l·∫≠p l·ªãch tr√¨nh:")
        self.logger.info("  - H√†ng ng√†y: 06:00")
        self.logger.info("  - H√†ng tu·∫ßn: Ch·ªß nh·∫≠t 08:00") 
        self.logger.info("  - H√†ng th√°ng: Ng√†y 1 l√∫c 07:00")
    
    def start_scheduler(self):
        """B·∫Øt ƒë·∫ßu scheduler"""
        self.setup_schedule()
        self.is_running = True
        
        self.logger.info("üöÄ B·∫Øt ƒë·∫ßu Auto Crawler...")
        self.logger.info("Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng")
        
        try:
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)  # Check m·ªói ph√∫t
                
        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è D·ª´ng Auto Crawler")
            self.is_running = False
    
    def start_in_background(self):
        """Ch·∫°y scheduler trong background thread"""
        def run():
            self.start_scheduler()
        
        thread = threading.Thread(target=run, daemon=True)
        thread.start()
        self.logger.info("üîÑ Auto Crawler ƒëang ch·∫°y trong background")
        return thread
    
    def stop(self):
        """D·ª´ng scheduler"""
        self.is_running = False
        schedule.clear()
        self.logger.info("‚èπÔ∏è ƒê√£ d·ª´ng Auto Crawler")
    
    def run_test_crawl(self):
        """Ch·∫°y test crawl ƒë·ªÉ ki·ªÉm tra"""
        self.logger.info("üß™ Ch·∫°y test crawl...")
        
        if not self.crawlers:
            self.logger.error("‚ùå Kh√¥ng c√≥ crawler n√†o ƒë∆∞·ª£c kh·ªüi t·∫°o")
            return
        
        # Test crawl ng√†y h√¥m nay
        results = self.crawl_today()
        
        self.logger.info("‚úÖ Test crawl ho√†n th√†nh!")
        return results

# Ch·∫°y th·ª≠ nghi·ªám
if __name__ == "__main__":
    print("ü§ñ Auto Crawler cho L·ªãch √Çm")
    print("=" * 40)
    
    crawler = AutoCrawler()
    
    # Menu
    while True:
        print("\nüìã Ch·ªçn ch·ª©c nƒÉng:")
        print("1. Test crawl ng√†y h√¥m nay")
        print("2. Crawl th√°ng hi·ªán t·∫°i")
        print("3. B·∫Øt ƒë·∫ßu scheduler t·ª± ƒë·ªông")
        print("4. Tho√°t")
        
        choice = input("\nNh·∫≠p l·ª±a ch·ªçn (1-4): ").strip()
        
        if choice == "1":
            crawler.run_test_crawl()
        elif choice == "2":
            crawler.crawl_current_month()
        elif choice == "3":
            crawler.start_scheduler()
        elif choice == "4":
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
